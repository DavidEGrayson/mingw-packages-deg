--- a/qtdeclarative/src/3rdparty/masm/masm.pri	2014-09-13 14:42:50.484236200 +0100
+++ b/qtdeclarative/src/3rdparty/masm/masm.pri	2014-09-13 15:31:51.666462200 +0100
@@ -60,7 +60,10 @@
 SOURCES += $$PWD/disassembler/ARMv7/ARMv7DOpcode.cpp
 HEADERS += $$PWD/disassembler/ARMv7/ARMv7DOpcode.h
 
-SOURCES += $$PWD/yarr/*.cpp
+SOURCES += $$PWD/yarr/YarrSyntaxChecker.cpp
+SOURCES += $$PWD/yarr/YarrCanonicalizeUCS2.cpp
+SOURCES += $$PWD/yarr/YarrInterpreter.cpp
+SOURCES += $$PWD/yarr/YarrJIT.cpp
 HEADERS += $$PWD/yarr/*.h
 
 retgen.output = RegExpJitTables.h
@@ -70,6 +73,22 @@
 retgen.commands = python $$retgen.script > ${QMAKE_FILE_OUT}
 QMAKE_EXTRA_COMPILERS += retgen
 
+# Hack around the following race condition bug:
+# https://bugreports.qt-project.org/browse/QTBUG-41292
+# I used qtbase/src/corelib/corelib.pro and
+# http://www.qtcentre.org/wiki/index.php?title=Undocumented_qmake
+# as reference. Ossi was not impressed at all with an earlier
+# (but quite similar) version. Note, retgen gets done once for
+# each of Debug and Release which could cause problems.
+SOURCES_DEP_ON_RETGEN = $$PWD/yarr/YarrPattern.cpp
+deponretgen.name = deponretgen
+deponretgen.input = SOURCES_DEP_ON_RETGEN RegExpJitTables.h
+deponretgen.dependency_type = TYPE_C
+deponretgen.variable_out = OBJECTS
+deponretgen.output = ${QMAKE_VAR_OBJECTS_DIR}${QMAKE_FILE_IN_BASE}$${first(QMAKE_EXT_OBJ)}
+deponretgen.commands = $$QMAKE_CXX -c $(CXXFLAGS) $(INCPATH) ${QMAKE_FILE_IN} -o ${QMAKE_FILE_OUT}
+QMAKE_EXTRA_COMPILERS += deponretgen
+
 # Taken from WebKit/Tools/qmake/mkspecs/features/unix/default_post.prf
 linux-g++* {
     greaterThan(QT_GCC_MAJOR_VERSION, 3):greaterThan(QT_GCC_MINOR_VERSION, 5) {
