diff -u -r libmill-1.2-orig/chan.c libmill-1.2/chan.c
--- libmill-1.2-orig/chan.c	2015-12-05 11:46:22.903992700 -0800
+++ libmill-1.2/chan.c	2015-12-05 11:55:45.854438900 -0800
@@ -258,7 +258,7 @@
     /* If there are clauses that are immediately available
        randomly choose one of them. */
     if(uc->available > 0) {
-        int chosen = uc->available == 1 ? 0 : (int)(random() % (uc->available));
+        int chosen = uc->available == 1 ? 0 : (int)(rand() % (uc->available));
         for(it = mill_slist_begin(&uc->clauses); it; it = mill_slist_next(it)) {
             cl = mill_cont(it, struct mill_clause, chitem);
             if(!cl->available)
@@ -288,7 +288,7 @@
         cl = mill_cont(it, struct mill_clause, chitem);
         if(mill_slow(cl->ep->refs > 1)) {
             if(cl->ep->tmp == -1)
-                cl->ep->tmp = cl->ep->refs == 1 ? 0 : (int)(random() % cl->ep->refs);
+                cl->ep->tmp = cl->ep->refs == 1 ? 0 : (int)(rand() % cl->ep->refs);
             if(cl->ep->tmp) {
                 --cl->ep->tmp;
                 cl->used = 0;
diff -u -r libmill-1.2-orig/debug.c libmill-1.2/debug.c
--- libmill-1.2-orig/debug.c	2015-12-05 11:46:23.013370400 -0800
+++ libmill-1.2/debug.c	2015-12-05 12:09:21.295305600 -0800
@@ -205,7 +205,8 @@
     /* First print the timestamp. */
     struct timeval nw;
     gettimeofday(&nw, NULL);
-    struct tm *nwtm = localtime(&nw.tv_sec);
+    time_t tv_sec = nw.tv_sec;
+    struct tm *nwtm = localtime(&tv_sec);
     snprintf(buf, sizeof buf, "%02d:%02d:%02d",
         (int)nwtm->tm_hour, (int)nwtm->tm_min, (int)nwtm->tm_sec);
     fprintf(stderr, "==> %s.%06d ", buf, (int)nw.tv_usec);
diff -u -r libmill-1.2-orig/ip.c libmill-1.2/ip.c
--- libmill-1.2-orig/ip.c	2015-12-05 11:46:22.919615000 -0800
+++ libmill-1.2/ip.c	2015-12-05 12:30:42.560183500 -0800
@@ -28,13 +28,20 @@
 #include <sys/eventfd.h>
 #endif
 
+#if defined _WIN32
+#include <winsock2.h>
+#include <ws2ipdef.h>
+#include <ws2tcpip.h>
+#else
 #include <arpa/inet.h>
-#include <errno.h>
 #include <netinet/in.h>
+#include <sys/socket.h>
+#endif
+
+#include <errno.h>
 #include <string.h>
 #include <sys/types.h>
-#include <sys/socket.h>
-#if !defined __sun
+#if !defined __sun && !defined _WIN32
 #include <ifaddrs.h>
 #endif
 #include <unistd.h>
@@ -165,7 +172,7 @@
     if(!name)
         return mill_ipany(port, mode);
     ipaddr addr = mill_ipliteral(name, port, mode);
-#if defined __sun
+#if defined __sun || defined _WIN32
     return addr;
 #else
     if(errno == 0)
diff -u -r libmill-1.2-orig/poller.c libmill-1.2/poller.c
--- libmill-1.2-orig/poller.c	2015-12-05 11:46:22.935242900 -0800
+++ libmill-1.2/poller.c	2015-12-05 12:36:09.494170000 -0800
@@ -162,7 +162,8 @@
 #include "epoll.inc"
 #elif defined BSD
 #include "kqueue.inc"
+#elif defined _WIN32
+// TODO: polling for Windows
 #else
 #include "poll.inc"
 #endif
-
diff -u -r libmill-1.2-orig/stack.c libmill-1.2/stack.c
--- libmill-1.2-orig/stack.c	2015-12-05 11:46:23.013370400 -0800
+++ libmill-1.2/stack.c	2015-12-05 12:45:07.387412400 -0800
@@ -27,7 +27,12 @@
 #include <stdlib.h>
 #include <errno.h>
 #include <unistd.h>
+
+#if defined _WIN32
+#include <windows.h>
+#else
 #include <sys/mman.h>
+#endif
 
 #include "slist.h"
 #include "stack.h"
@@ -38,7 +43,13 @@
     static long pgsz = 0;
     if(mill_fast(pgsz))
         return (size_t)pgsz;
+    #if defined _WIN32
+    SYSTEM_INFO si;
+    GetSystemInfo(&si);
+    pgsz = si.dwPageSize;
+    #else
     pgsz = sysconf(_SC_PAGE_SIZE);
+    #endif
     mill_assert(pgsz > 0);
     return (size_t)pgsz;
 }
diff -u -r libmill-1.2-orig/tcp.c libmill-1.2/tcp.c
--- libmill-1.2-orig/tcp.c	2015-12-05 11:46:22.935242900 -0800
+++ libmill-1.2/tcp.c	2015-12-05 13:17:40.607605100 -0800
@@ -22,15 +22,22 @@
 
 */
 
+#if defined _WIN32
+#include <winsock2.h>
+#include <ws2ipdef.h>
+#include <ws2tcpip.h>
+#else
 #include <arpa/inet.h>
+#include <netinet/in.h>
+#include <sys/socket.h>
+#endif
+
 #include <errno.h>
 #include <fcntl.h>
-#include <netinet/in.h>
 #include <stddef.h>
 #include <stdlib.h>
 #include <string.h>
 #include <sys/types.h>
-#include <sys/socket.h>
 #include <unistd.h>
 
 #include "ip.h"
@@ -57,13 +64,13 @@
 
 struct mill_tcplistener {
     struct mill_tcpsock sock;
-    int fd;
+    SOCKET fd;
     int port;
 };
 
 struct mill_tcpconn {
     struct mill_tcpsock sock;
-    int fd;
+    SOCKET fd;
     size_t ifirst;
     size_t ilen;
     size_t olen;
@@ -72,13 +79,18 @@
     ipaddr addr;
 };
 
-static void mill_tcptune(int s) {
+static void mill_tcptune(SOCKET s) {
     /* Make the socket non-blocking. */
+#if defined _WIN32
+    unsigned long nonblocking = 1;
+    ioctlsocket(s, FIONBIO, &nonblocking);
+#else
     int opt = fcntl(s, F_GETFL, 0);
     if (opt == -1)
         opt = 0;
     int rc = fcntl(s, F_SETFL, opt | O_NONBLOCK);
     mill_assert(rc != -1);
+#endif
     /*  Allow re-using the same local address rapidly. */
     opt = 1;
     rc = setsockopt(s, SOL_SOCKET, SO_REUSEADDR, &opt, sizeof (opt));
@@ -92,7 +104,7 @@
 #endif
 }
 
-static void tcpconn_init(struct mill_tcpconn *conn, int fd) {
+static void tcpconn_init(struct mill_tcpconn *conn, SOCKET fd) {
     conn->sock.type = MILL_TCPCONN;
     conn->fd = fd;
     conn->ifirst = 0;
@@ -102,7 +114,7 @@
 
 tcpsock tcplisten(ipaddr addr, int backlog) {
     /* Open the listening socket. */
-    int s = socket(mill_ipfamily(addr), SOCK_STREAM, 0);
+    SOCKET s = socket(mill_ipfamily(addr), SOCK_STREAM, 0);
     if(s == -1)
         return NULL;
     mill_tcptune(s);
@@ -168,7 +180,7 @@
     while(1) {
         /* Try to get new connection (non-blocking). */
         addrlen = sizeof(addr);
-        int as = accept(l->fd, (struct sockaddr *)&addr, &addrlen);
+        SOCKET as = accept(l->fd, (struct sockaddr *)&addr, &addrlen);
         if (as >= 0) {
             mill_tcptune(as);
             struct mill_tcpconn *conn = malloc(sizeof(struct mill_tcpconn));
@@ -198,7 +210,7 @@
 
 tcpsock tcpconnect(ipaddr addr, int64_t deadline) {
     /* Open a socket. */
-    int s = socket(mill_ipfamily(addr), SOCK_STREAM, 0);
+    SOCKET s = socket(mill_ipfamily(addr), SOCK_STREAM, 0);
     if(s == -1)
         return NULL;
     mill_tcptune(s);
@@ -447,7 +459,7 @@
     mill_assert(0);
 }
 
-tcpsock tcpattach(int fd, int listening) {
+tcpsock tcpattach(SOCKET fd, int listening) {
     if(listening == 0) {
         struct mill_tcpconn *conn = malloc(sizeof(struct mill_tcpconn));
         if(!conn) {
diff -u -r libmill-1.2-orig/utils.h libmill-1.2/utils.h
--- libmill-1.2-orig/utils.h	2015-12-05 11:46:22.935242900 -0800
+++ libmill-1.2/utils.h	2015-12-05 11:51:20.047750400 -0800
@@ -31,13 +31,21 @@
 #include <stdio.h>
 #include <stdlib.h>
 
-/* For now use longjmp. Replace by a different mechanism as needed. */
+/* For now use longjmp or siglongjmp. Replace by a different mechanism as needed. */
+
+#ifdef _WIN32
+struct mill_ctx {
+    jmp_buf jbuf;
+};
+#define mill_setjmp(ctx) setjmp((ctx)->jbuf)
+#define mill_jmp(ctx) longjmp((ctx)->jbuf, 1)
+#else
 struct mill_ctx {
     sigjmp_buf jbuf;
 };
-
 #define mill_setjmp(ctx) sigsetjmp((ctx)->jbuf, 0)
 #define mill_jmp(ctx) siglongjmp((ctx)->jbuf, 1)
+#endif
 
 /* Cause panic. */
 void mill_panic(const char *text);
